{"version":3,"sources":["reducers/sortReducer.js","reducers/rootReducer.js","store.js","components/TableCaptions/TableCaptions.js","components/TableCaptions/TableCaptionsContainer.js","actions/sortActions.js","components/TableRow/TableRow.js","components/TableRowsList/TableRowsList.js","components/TableRowsList/TableRowsListContainer.js","components/ProfilesTable/ProfilesTable.js","components/App.js","index.js"],"names":["initialSort","localStorage","JSON","parse","sortReducer","state","action","currentField","sortField","type","value","rootReducer","combineReducers","sort","store","createStore","subscribe","currentSort","stringify","getState","TableCaption","currentCaptions","onChangeSort","f","sortValue","map","item","i","key","onClick","className","connect","Set","Object","keys","profiles","forEach","caption","add","dispatch","field","changeSort","TableCaptions","TableRow","profileValues","TableRowsList","profilesList","profile","profilesArr","sortFunc","a","b","toLowerCase","values","ProfilesTable","TableCaptionsContainer","TableRowsListContainer","App","render","document","getElementById"],"mappings":"ySACMA,EAAeC,aAAa,iBAChCC,KAAKC,MAAMF,aAAa,kBACxB,GA2BaG,EAzBK,WAEd,IADJC,EACG,uDADKL,EAAaM,EAClB,uCACGC,EAAeD,EAAOE,UAE5B,OAAQF,EAAOG,MACb,IAAK,cACH,OAAIJ,EAAME,eAAiBA,EAClB,CACLA,eACAG,MAAwB,QAAhBL,EAAMK,MAAmB,OAAS,OAIvC,CACLH,eACAG,MAAO,OAIX,QACE,OAAOL,ICnBEM,EAJKC,YAAgB,CAClCC,KAAMT,ICDFU,EAAQC,YAAYJ,GAE1BG,EAAME,WAAU,WACd,IAAMC,EAAcf,KAAKgB,UAAUJ,EAAMK,WAAWN,MACpDZ,aAAa,iBAAmBgB,KAGnBH,Q,cCiBAM,G,MAxBM,SAAC,GAAD,QACnBC,uBADmB,MACD,GADC,MAEnBC,oBAFmB,MAEJ,SAAAC,GAAC,OAAIA,GAFD,MAGnBC,iBAHmB,MAGP,GAHO,MAInBhB,iBAJmB,MAIP,GAJO,SAMnB,+BACE,4BAEIa,EAAgBI,KAAI,SAACC,EAAMC,GAAP,OAClB,wBACEC,IAAKD,EACLE,QAAS,kBAAMP,EAAaI,IAC5BI,UACGtB,IAAckB,EAAf,wBAAwCF,GAAc,WAGvDE,UCQEK,eAvBS,SAAC,GAElB,IAAD,IADJlB,KAAsBL,EAClB,EADID,aAAgCiB,EACpC,EAD6Bd,MAE3BW,EAAkB,IAAIW,IAO5B,OAJAC,OAAOC,KAAKC,EAAS,IAAIC,SACvB,SAAAC,GAAO,OAAIhB,EAAgBiB,IAAID,MAG1B,CACLhB,gBAAgB,YAAKA,GACrBb,YACAgB,gBAIuB,SAAAe,GAAQ,MAAK,CACtCjB,aADsC,SACzBkB,GACXD,ECxBsB,eAAC/B,EAAD,uDAAa,GAAb,MAAqB,CAC7CC,KAAM,cACND,aDsBWiC,CAAWD,QAITT,CAGbW,GEnBaC,G,MATE,SAAC,GAAD,QAAGC,qBAAH,MAAmB,GAAnB,SACf,4BAEIA,EAAcnB,KAAI,SAACf,EAAOiB,GAAR,OAChB,wBAAIC,IAAKD,GAAIjB,SCMNmC,EAVO,SAAC,GAAD,QAAGC,oBAAH,MAAkB,GAAlB,SACpB,+BAEIA,EAAarB,KACX,SAACsB,EAASpB,GAAV,OACE,kBAAC,EAAD,CAAUC,IAAKD,EAAGiB,cAAeG,SCsB5BhB,eA1BS,SAAC,GAElB,IAAD,IADJlB,KAAsBL,EAClB,EADID,aAAgCiB,EACpC,EAD6Bd,MAG7BsC,EAAW,YAAOb,GAEtB,GAAG3B,EAAW,CAEZ,IAAIyC,EAAW,SAACC,EAAGC,GAAJ,OAAWD,EAAE1C,GAAW4C,cAAgBD,EAAE3C,GAAW4C,cAAiB,GAAI,GAExE,SAAd5B,IACDyB,EAAW,SAACC,EAAGC,GAAJ,OAAWD,EAAE1C,GAAW4C,cAAgBD,EAAE3C,GAAW4C,cAAiB,GAAI,IAGvFJ,EAAYnC,KAAKoC,GAOnB,MAAO,CACLH,aALmBE,EAAYvB,KAC/B,SAAAC,GAAI,OAAIO,OAAOoB,OAAO3B,SAQXK,CAAyBc,GCnBzBS,G,MANO,kBACpB,+BACE,kBAACC,EAAD,MACA,kBAACC,EAAD,SCDWC,G,MAHH,kBACV,kBAAC,EAAD,QCCFC,iBACE,kBAAC,IAAD,CAAU5C,MAAOA,GACf,kBAAC,EAAD,OAEF6C,SAASC,eAAe,qB","file":"static/js/main.8af368b2.chunk.js","sourcesContent":["// Get initial sort value\r\nconst initialSort = (localStorage['profiles-sort']) ?\r\n  JSON.parse(localStorage['profiles-sort']) :\r\n  {}\r\n\r\nconst sortReducer = (\r\n  state = initialSort, action\r\n) => {\r\n  const currentField = action.sortField;\r\n  \r\n  switch (action.type) {\r\n    case \"CHANGE_SORT\": {\r\n      if (state.currentField === currentField) {\r\n        return {\r\n          currentField,\r\n          value: (state.value === 'low') ? 'high' : 'low'\r\n        }\r\n      }\r\n\r\n      return {\r\n        currentField,\r\n        value: 'low'\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default sortReducer;","import { combineReducers } from 'redux';\r\nimport sortReducer from '../reducers/sortReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  sort: sortReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from 'redux'; \r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nstore.subscribe(() => {\r\n  const currentSort = JSON.stringify(store.getState().sort);\r\n  localStorage['profiles-sort'] = currentSort;\r\n});\r\n\r\nexport default store;","import React from 'react';\r\nimport './TableCaptions.css';\r\n\r\nconst TableCaption = ({\r\n  currentCaptions = [],\r\n  onChangeSort = f => f,\r\n  sortValue = \"\",\r\n  sortField = \"\"\r\n}) =>\r\n  <thead>\r\n    <tr>\r\n      {\r\n        currentCaptions.map((item, i) =>\r\n          <th\r\n            key={i}\r\n            onClick={() => onChangeSort(item)}\r\n            className={\r\n              (sortField === item) ? ` caption sort-${sortValue}` : 'caption'\r\n            }\r\n          >\r\n            {item}\r\n          </th>\r\n        )\r\n      }\r\n    </tr>\r\n  </thead>\r\n\r\nexport default TableCaption;","import { connect } from 'react-redux';\r\nimport profiles from '../../data/profiles.json';\r\nimport TableCaptions from './TableCaptions';\r\nimport { changeSort } from '../../actions/sortActions';\r\n\r\nconst mapStateToProps = ({\r\n  sort: { currentField: sortField, value: sortValue }\r\n}) => {\r\n  const currentCaptions = new Set();\r\n\r\n  // Get table captions by first profiles element\r\n  Object.keys(profiles[0]).forEach(\r\n    caption => currentCaptions.add(caption)\r\n  );\r\n\r\n  return {\r\n    currentCaptions: [...currentCaptions],\r\n    sortField,\r\n    sortValue\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChangeSort(field) {\r\n    dispatch(changeSort(field));\r\n  }\r\n})\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TableCaptions);","export const changeSort = (sortField = \"\") => ({\r\n  type: \"CHANGE_SORT\",\r\n  sortField\r\n})\r\n","import React from 'react';\r\nimport './TableRow.css';\r\n\r\nconst TableRow = ({ profileValues = [] }) =>\r\n  <tr>\r\n    {\r\n      profileValues.map((value, i) =>\r\n        <td key={i}>{value}</td>\r\n      )\r\n    }\r\n  </tr>\r\n\r\nexport default TableRow;","import React from 'react';\r\nimport TableRow from '../TableRow/TableRow';\r\n\r\nconst TableRowsList = ({ profilesList = [] }) =>\r\n  <tbody>\r\n    {\r\n      profilesList.map(\r\n        (profile, i) => \r\n          <TableRow key={i} profileValues={profile} />\r\n      )\r\n    }\r\n  </tbody>\r\n\r\nexport default TableRowsList;","import { connect } from 'react-redux';\r\nimport TableRowsList from './TableRowsList';\r\nimport profiles from '../../data/profiles.json';\r\n\r\nconst mapStateToProps = ({ \r\n  sort: { currentField: sortField, value: sortValue } \r\n}) => {\r\n\r\n  let profilesArr = [...profiles];  //Create profiles clone\r\n\r\n  if(sortField) {\r\n    // Choose sort function\r\n    let sortFunc = (a, b) => (a[sortField].toLowerCase() > b[sortField].toLowerCase()) ? 1: -1;\r\n\r\n    if(sortValue === 'high') {\r\n      sortFunc = (a, b) => (a[sortField].toLowerCase() < b[sortField].toLowerCase()) ? 1: -1;\r\n    }\r\n\r\n    profilesArr.sort(sortFunc);  // Sort profiles by current sort function\r\n  }\r\n\r\n  const profilesList = profilesArr.map(  // Get profiles data without captions\r\n    item => Object.values(item)\r\n  )\r\n\r\n  return {\r\n    profilesList\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(TableRowsList);","import React from 'react';\r\nimport TableCaptionsContainer from '../TableCaptions/TableCaptionsContainer';\r\nimport TableRowsListContainer from '../TableRowsList/TableRowsListContainer';\r\nimport './ProfilesTable.css';\r\n\r\nconst ProfilesTable = () =>\r\n  <table>\r\n    <TableCaptionsContainer />\r\n    <TableRowsListContainer />\r\n  </table>\r\n\r\nexport default ProfilesTable;","import React from 'react';\r\nimport ProfilesTable from './ProfilesTable/ProfilesTable';\r\nimport './App.css';\r\n\r\nconst App = () =>\r\n  <ProfilesTable />\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport App from './components/App';\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('react-container')\r\n)\r\n"],"sourceRoot":""}